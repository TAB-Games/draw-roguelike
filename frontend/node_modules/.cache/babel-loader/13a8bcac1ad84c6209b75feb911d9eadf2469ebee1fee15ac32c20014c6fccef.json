{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  questions: [],\n  error: null,\n  score: null,\n  currentQuestionIndex: null,\n  answers: []\n};\nconst initialChatState = {\n  answers: []\n};\nconst quizSlice = createSlice({\n  name: \"quiz\",\n  initialState,\n  reducers: {\n    fetchQuestionsSuccess(state, action) {\n      state.questions = action.payload;\n      state.score = 0;\n      state.currentQuestionIndex = 0;\n      state.answers = [];\n    },\n    fetchQuestionsFail(state, action) {\n      state.error = action.payload;\n    },\n    answerQuestion(state, action) {\n      const currentQuestion = state.questions[state.currentQuestionIndex];\n      state.score += action.payload.answer === currentQuestion.correct_answer ? 1 : 0;\n      state.answers.push({\n        question: currentQuestion.question,\n        answer: action.payload.answer,\n        correctAnswer: currentQuestion.correct_answer,\n        isCorrect: action.payload.answer === currentQuestion.correct_answer\n      });\n    },\n    nextQuestion(state, action) {\n      state.currentQuestionIndex += 1;\n    }\n  }\n});\nconst chatSlice = createSlice({\n  name: \"chat\",\n  initialChatState,\n  reducers: {\n    addMessage(state, action) {\n      // TODO: make sure this grabs the right thing from payload\n      state.answers.push(action.payload);\n    }\n  }\n});\nexport const {\n  fetchQuestionsSuccess,\n  fetchQuestionsFail,\n  answerQuestion,\n  nextQuestion\n} = quizSlice.actions;\nexport default quizSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","questions","error","score","currentQuestionIndex","answers","initialChatState","quizSlice","name","reducers","fetchQuestionsSuccess","state","action","payload","fetchQuestionsFail","answerQuestion","currentQuestion","answer","correct_answer","push","question","correctAnswer","isCorrect","nextQuestion","chatSlice","addMessage","actions","reducer"],"sources":["/Users/ZIW2927/Documents/practice/draw-roguelike/frontend/src/store/slices/game.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  questions: [],\n  error: null,\n  score: null,\n  currentQuestionIndex: null,\n  answers: [],\n};\n\nconst initialChatState = {\n  answers: [],\n};\n\nconst quizSlice = createSlice({\n  name: \"quiz\",\n  initialState,\n  reducers: {\n    fetchQuestionsSuccess(state, action) {\n      state.questions = action.payload;\n      state.score = 0;\n      state.currentQuestionIndex = 0;\n      state.answers = [];\n    },\n    fetchQuestionsFail(state, action) {\n      state.error = action.payload;\n    },\n    answerQuestion(state, action) {\n      const currentQuestion = state.questions[state.currentQuestionIndex];\n      state.score +=\n        action.payload.answer === currentQuestion.correct_answer ? 1 : 0;\n      state.answers.push({\n        question: currentQuestion.question,\n        answer: action.payload.answer,\n        correctAnswer: currentQuestion.correct_answer,\n        isCorrect: action.payload.answer === currentQuestion.correct_answer,\n      });\n    },\n    nextQuestion(state, action) {\n      state.currentQuestionIndex += 1;\n    },\n  },\n});\n\nconst chatSlice = createSlice({\n  name: \"chat\",\n  initialChatState,\n  reducers: {\n    addMessage(state, action) {\n      // TODO: make sure this grabs the right thing from payload\n      state.answers.push(action.payload);\n    },\n  },\n});\n\nexport const {\n  fetchQuestionsSuccess,\n  fetchQuestionsFail,\n  answerQuestion,\n  nextQuestion,\n} = quizSlice.actions;\n\nexport default quizSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,IAAI;EACXC,oBAAoB,EAAE,IAAI;EAC1BC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACvBD,OAAO,EAAE;AACX,CAAC;AAED,MAAME,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,MAAM;EACZR,YAAY;EACZS,QAAQ,EAAE;IACRC,qBAAqBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACnCD,KAAK,CAACV,SAAS,GAAGW,MAAM,CAACC,OAAO;MAChCF,KAAK,CAACR,KAAK,GAAG,CAAC;MACfQ,KAAK,CAACP,oBAAoB,GAAG,CAAC;MAC9BO,KAAK,CAACN,OAAO,GAAG,EAAE;IACpB,CAAC;IACDS,kBAAkBA,CAACH,KAAK,EAAEC,MAAM,EAAE;MAChCD,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,cAAcA,CAACJ,KAAK,EAAEC,MAAM,EAAE;MAC5B,MAAMI,eAAe,GAAGL,KAAK,CAACV,SAAS,CAACU,KAAK,CAACP,oBAAoB,CAAC;MACnEO,KAAK,CAACR,KAAK,IACTS,MAAM,CAACC,OAAO,CAACI,MAAM,KAAKD,eAAe,CAACE,cAAc,GAAG,CAAC,GAAG,CAAC;MAClEP,KAAK,CAACN,OAAO,CAACc,IAAI,CAAC;QACjBC,QAAQ,EAAEJ,eAAe,CAACI,QAAQ;QAClCH,MAAM,EAAEL,MAAM,CAACC,OAAO,CAACI,MAAM;QAC7BI,aAAa,EAAEL,eAAe,CAACE,cAAc;QAC7CI,SAAS,EAAEV,MAAM,CAACC,OAAO,CAACI,MAAM,KAAKD,eAAe,CAACE;MACvD,CAAC,CAAC;IACJ,CAAC;IACDK,YAAYA,CAACZ,KAAK,EAAEC,MAAM,EAAE;MAC1BD,KAAK,CAACP,oBAAoB,IAAI,CAAC;IACjC;EACF;AACF,CAAC,CAAC;AAEF,MAAMoB,SAAS,GAAGzB,WAAW,CAAC;EAC5BS,IAAI,EAAE,MAAM;EACZF,gBAAgB;EAChBG,QAAQ,EAAE;IACRgB,UAAUA,CAACd,KAAK,EAAEC,MAAM,EAAE;MACxB;MACAD,KAAK,CAACN,OAAO,CAACc,IAAI,CAACP,MAAM,CAACC,OAAO,CAAC;IACpC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,qBAAqB;EACrBI,kBAAkB;EAClBC,cAAc;EACdQ;AACF,CAAC,GAAGhB,SAAS,CAACmB,OAAO;AAErB,eAAenB,SAAS,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}